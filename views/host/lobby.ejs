<!DOCTYPE html>
<html lang="vi">

<head>
    <title>Bamboo - <%= lobbyID %></title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/style/host/lobby.css">
</head>

<body>
    <nav class="navbar navbar-light bg-light">
        <p>Lobby ID: <span id="roomID"> <%= lobbyID %> </span></p>
        <button type="button" class="btn btn-success startButton" onclick="startGame()">START GAME</button>
        <ul class="nav justify-content-end">
            <li class="nav-item">
                <p>Host: <span id="hostname"></span></p>
            </li>
            <li class="nav-item">
                <button type="button" class="btn btn-outline-dark" onclick="signOut()">Sign out</button>
            </li>
        </ul>
    </nav>
    <div class="container">
        <div class="row main">
            <div class="col-md-8">
                <div class="alert alert-secondary" role="alert">
                    Players
                </div>
                <div class="alert alert-success playerList" role="alert">
                    <ul id="playerList">
                    </ul>
                </div>
                <div class="alert alert-secondary" role="alert">
                    <div class="row">
                        <div class="col-sm-3">
                            Question packs
                        </div>
                        <div class="col-sm-9">
                            <div class="input-group input-group-sm">
                                <!-- <div class="input-group-prepend">
                                    <button class="btn btn-outline-secondary" type="button"
                                        onclick="search()">Search</button>
                                </div>
                                <input type="text" class="form-control"> -->
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button"
                                        onclick="create()">Create</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="questionPacks" class="alert alert-success packList" role="alert">
                    <div class="card packCard" style="display:None;">
                        <img class="card-img-top" src="/images/no-image-available.jpg" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title">Pack title</h5>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <button type="button" class="btn btn-outline-dark" onclick="back()">Back</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-secondary" role="alert">
                    Pack Info
                </div>
                <div class="card pack-info">
                    <img class="card-img-top" id="pack-img" src="/images/no-image-available.jpg" alt="Card image cap">
                    <div class="card-body" id="desc-body" >
                        <h5 class="card-title" id="title">Pack Title</h5>
                        <h5 class="card-title" id="packId" style="display:None;">001</h5>
                        <p class="card-text" id="description">This is an example description. This is an example description. This is an
                            example description. This is an example description. This is an example description. This is
                            an example description. This is an example description. This is an example description. </p>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Categories</h5>
                        <p class="card-text">
                            <%# Tags %>
                            <span class="badge badge-info">Tag1</span>
                            <span class="badge badge-info">Tag2</span>
                            <span class="badge badge-info">Tag3</span>
                            <span class="badge badge-info">Info</span>
                            <span class="badge badge-info">Info</span>
                            <span class="badge badge-info">Info</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.3/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.3/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.9.4/firebase-database.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js"></script>

    <script src="/javascript/config.js"></script>
    <script>
        var $jq = jQuery.noConflict();

        var socket = io.connect();

        const roomID = "<%= lobbyID%>";

        function checkingValidLobbyOwner(uid) {
            socket.emit('lobby', {
                state: 0,
                uid: uid,
                roomID: roomID
            });
        }

        function getQuestionsPackData(uid) {
            socket.emit('lobby', {
                state: 1,
                uid: uid,
                roomID: roomID
            });
        }

        function create(){
            console.log('[DEBUG] Navigate to createQuestionPacks');
            window.location.href = '/createQuestionPacks/<%= lobbyID %>';
        }

        function getPlayers(uid) {
            socket.emit('lobby', {
                state: 2,
                roomID: roomID
            });
        }

        function setUpSocket(uid) {

            socket.on('connection', function (data) {
                console.log('[] Made a connection: ', data.id);
            });

            socket.on('disconnect', function (data) {
                console.log('[] Disconnect to server socket: ', data.id);
            });

            socket.on('lobby', function (data) {
                console.log('[INFO] Receive a socket. State', data.state);
                console.log('[INFO] Data: ', data)
                var state = data.state;

                if (roomID == data.roomID) {
                    if (state == 1) {
                        // Available Question Packs of that host 
                        var questionPacks = data.questionPacks;
                        var parent = $jq("#questionPacks");
                        var childStr = "";

                        if (Object.keys(questionPacks).length==0) {
                            alert("You don't have a question pack yet!\n Create one now!");
                            // // redirect to creatQuestionPack
                            window.location.href = '/createQuestionPacks/<%= lobbyID %>';
                        }

                        if(Object.keys(questionPacks).length >= 1){
                            let key = Object.keys(questionPacks)[0];
                            $jq("#pack-img").attr('src', questionPacks[key].imageURL);
                            $jq("#title").text(questionPacks[key].title);
                            $jq("#packId").text(key);
                            $jq("#description").text(questionPacks[key].description);
                        }
                        for (let key in questionPacks) {
                            childStr = "<div class=\"card packCard\" id=\"" + key + "\" ><img class=\"card-img-top\" src=\"" + questionPacks[key].imageURL + "\" alt=\"Card image cap\"><div class=\"card-body\"><h5 class=\"card-title\">" + questionPacks[key].title + "</h5></div></div>";
                            parent.append(childStr);
                            $jq("#" + key).click(function(){
                                // $jq("#pack-img").attr('src',"/images/" + key + "/" + questionPacks[key].imageURL);
                                $jq("#pack-img").attr('src', questionPacks[key].imageURL);
                                $jq("#title").text(questionPacks[key].title);
                                $jq("#packId").text(key);
                                $jq("#description").text(questionPacks[key].description);
                            });
                        }
                        
                        // parent.html(childStr);
                    } else if (state == 2) {
                        // get list of user for the first time
                        var players = data.players;
                        var playerList = $jq("#playerList");
                        let childStr = "";
                        for (var key in players) {
                            childStr += "<li class=\"badge badge-success\">" + players[key]['name'] + "</li>";
                        }
                        playerList.html(childStr);
                    } else if (state == 3) {
                        // add user
                        var playerList = $jq("#playerList");
                        let childStr = playerList.html();
                        childStr += "<li class=\"badge badge-success\">" + data.name + "</li>";
                        playerList.html(childStr);
                    } else if (state == 4) {
                        if (data.uid == uid) {
                            window.location.href = '/';
                        }
                    }
                }
            });
        }

        


        // Check user signed-in
        firebase.auth().onAuthStateChanged(function (user) {
            if (user && !user.isAnonymous) {
                // User is signed in.

                setUpSocket(user.uid);
                checkingValidLobbyOwner(user.uid);
                getQuestionsPackData(user.uid);
                getPlayers(user.uid);
                
                // change hostname to displayName
                $jq("#hostname").text(user.displayName);
                // get new lobby id from Firebase

                // ...
            } else {
                // User is signed out.
                alert("You have not signed-in yet :(");
                // Redirect to authen
                window.location.href = '/authen';
                // ...
            }
        });



        function signOut() {
            firebase.auth().signOut().then(function () {
                console.log('Signed Out');
            }, function (error) {
                console.error('Sign Out Error', error);
            });
        }

        function back() {
            firebase.database().ref('/Rooms/r<%= lobbyID %>').remove();
            setTimeout(() => {
                window.location.href = "/";
            }, 500);
        }

        function startGame() {
            var key = $jq("#packId").text();
            window.location.href = '/host/gameView?roomID='+roomID+'&questionsPackId='+key.slice(1,key.length);
        }

    </script>

</body>

</html>